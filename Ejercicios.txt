Hola Mundo: Crea un servidor básico en NodeJS que responda "Hola Mundo" en la raíz (/). *Se le agrego el manejo de rutas

Calculadora Simple: Desarrolla una API que reciba dos números y una operación (suma, resta, multiplicación, división) y devuelva el resultado.

Contador de Visitas: Crea un servidor que cuente el número de veces que se ha accedido a la página y muestre ese número.

Gestor de Tareas: Implementa un API RESTful para gestionar una lista de tareas con operaciones CRUD (Crear, Leer, Actualizar, Borrar).

Servidor de Archivos Estáticos: Configura un servidor que sirva archivos estáticos (HTML, CSS, JS) desde una carpeta específica.

Conversor de Monedas: Crea un API que convierta cantidades entre diferentes monedas utilizando una API externa de tasas de cambio.

Autenticación Básica: Desarrolla un sistema de autenticación simple utilizando tokens JWT para proteger rutas en tu servidor.

Chat en Tiempo Real: Implementa una aplicación de chat básica usando Socket.IO para la comunicación en tiempo real entre el cliente y el servidor.

Formulario de Contacto: Crea un formulario de contacto en un sitio web y haz que envíe los datos a tu servidor, el cual los guardará en un archivo.

Consumo de API Externa: Desarrolla una aplicación que haga una solicitud a una API externa (por ejemplo, datos del clima) y muestre la información obtenida.

--------------------------------------- FILESYSTEM ------------------------------------------------

Crear y Escribir en un Archivo:
Crea un programa que escriba un mensaje en un archivo llamado mensaje.txt.

Leer un Archivo:
Crea un programa que lea el contenido de mensaje.txt y lo muestre en la consola.

Renombrar un Archivo:
Crea un programa que renombre mensaje.txt a nuevoMensaje.txt.

Eliminar un Archivo:
Crea un programa que elimine nuevoMensaje.txt.

Listar Archivos en un Directorio:
Crea un programa que liste todos los archivos en un directorio específico.



---------------------------------------- EJERCICIOS URL -----------------------------------------------------
Ejercicio 1: Analiza una URL dada y extrae su protocolo, host, path, y parámetros de consulta. Imprime cada uno de estos componentes.

Ejercicio 2: Crea una URL a partir de un objeto que contenga el protocolo, host, path y parámetros de consulta. Asegúrate de que la URL generada sea válida.

Ejercicio 3: Dada una URL con parámetros de consulta, extrae los valores de esos parámetros y conviértelos en un objeto JavaScript. Por ejemplo, para la URL http://example.com?name=John&age=30, el objeto resultante debería ser { name: 'John', age: '30' }.

Ejercicio 4: Modifica una URL dada para cambiar su path y agregar un nuevo parámetro de consulta. Por ejemplo, cambia el path de http://example.com/oldpath a /newpath y agrega el parámetro foo=bar.

Ejercicio 5: Dada una URL con un fragmento (hash), elimina el fragmento y devuelve la URL sin él. Por ejemplo, para http://example.com/page#section, la URL resultante debería ser http://example.com/page.

Ejercicio 6: Convierte una URL relativa a una URL absoluta utilizando una URL base proporcionada. Por ejemplo, convierte /path/to/resource en http://example.com/path/to/resource utilizando http://example.com como base.

Ejercicio 7: Extrae y muestra solo el nombre del dominio de una URL completa. Por ejemplo, para http://www.example.com/path, deberías obtener www.example.com.

Ejercicio 8: Dada una URL completa y un objeto de parámetros, construye una nueva URL que incluya esos parámetros adicionales. Por ejemplo, si tienes http://example.com/path y el objeto { foo: 'bar' }, la nueva URL debería ser http://example.com/path?foo=bar.

Ejercicio 9: Implementa una función que tome una URL completa y devuelva un objeto con los componentes protocol, host, pathname, y search de la URL.

Ejercicio 10: Extrae y decodifica los parámetros de consulta de una URL que contiene valores codificados en URL. Por ejemplo, para http://example.com/?name=John%20Doe&age=30, el objeto resultante debería ser { name: 'John Doe', age: '30' }.

----------------------------------------- MAS EJERCICIOS ------------------------------------------------ 

Manejo de Fechas y Tiempos con date-fns
Enunciado: Crea una función que reciba una fecha en formato string y devuelva la diferencia en días con la fecha actual utilizando el módulo date-fns.

Creación de Servidores HTTPS con https
Enunciado: Configura un servidor HTTPS básico utilizando el módulo https y sirve una página HTML simple.

Trabajando con Buffers
Enunciado: Escribe una función que convierta un string a un buffer y luego lo vuelva a convertir a un string, demostrando el uso de buffers en NodeJS.

Realizar Peticiones HTTP con axios
Enunciado: Utiliza el módulo axios para hacer una petición GET a una API pública (por ejemplo, la API de Pokémon) y muestra la respuesta en la consola.

Creación de Servidor WebSocket con ws
Enunciado: Implementa un servidor WebSocket básico utilizando el módulo ws que permita a los clientes conectarse y enviar mensajes.

Manejo de Procesos Hijos con child_process
Enunciado: Crea un script que ejecute un comando del sistema operativo (por ejemplo, ls en Unix o dir en Windows) y muestra el resultado en la consola utilizando el módulo child_process.

Compresión y Descompresión con zlib
Enunciado: Implementa funciones para comprimir y descomprimir strings utilizando el módulo zlib.

Creación de un Servidor UDP con dgram
Enunciado: Configura un servidor UDP básico que escuche en un puerto específico y responda con un mensaje predefinido utilizando el módulo dgram.

Manejo de Variables de Entorno con dotenv
Enunciado: Crea una aplicación que cargue variables de entorno desde un archivo .env utilizando el módulo dotenv y muestra estas variables en la consola.

Cifrado y Descifrado de Datos con crypto
Enunciado: Escribe funciones para cifrar y descifrar un string utilizando el módulo crypto.







