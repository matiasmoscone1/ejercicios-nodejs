Hola Mundo: Crea un servidor básico en NodeJS que responda "Hola Mundo" en la raíz (/). *Se le agrego el manejo de rutas

Calculadora Simple: Desarrolla una API que reciba dos números y una operación (suma, resta, multiplicación, división) y devuelva el resultado.

Contador de Visitas: Crea un servidor que cuente el número de veces que se ha accedido a la página y muestre ese número.

Gestor de Tareas: Implementa un API RESTful para gestionar una lista de tareas con operaciones CRUD (Crear, Leer, Actualizar, Borrar).

Servidor de Archivos Estáticos: Configura un servidor que sirva archivos estáticos (HTML, CSS, JS) desde una carpeta específica.

Conversor de Monedas: Crea un API que convierta cantidades entre diferentes monedas utilizando una API externa de tasas de cambio.

Autenticación Básica: Desarrolla un sistema de autenticación simple utilizando tokens JWT para proteger rutas en tu servidor.

Chat en Tiempo Real: Implementa una aplicación de chat básica usando Socket.IO para la comunicación en tiempo real entre el cliente y el servidor.

Formulario de Contacto: Crea un formulario de contacto en un sitio web y haz que envíe los datos a tu servidor, el cual los guardará en un archivo.

Consumo de API Externa: Desarrolla una aplicación que haga una solicitud a una API externa (por ejemplo, datos del clima) y muestre la información obtenida.

--------------------------------------- FILESYSTEM ------------------------------------------------

Crear y Escribir en un Archivo:
Crea un programa que escriba un mensaje en un archivo llamado mensaje.txt.

Leer un Archivo:
Crea un programa que lea el contenido de mensaje.txt y lo muestre en la consola.

Renombrar un Archivo:
Crea un programa que renombre mensaje.txt a nuevoMensaje.txt.

Eliminar un Archivo:
Crea un programa que elimine nuevoMensaje.txt.

Listar Archivos en un Directorio:
Crea un programa que liste todos los archivos en un directorio específico.



---------------------------------------- EJERCICIOS URL -----------------------------------------------------
Ejercicio 1: Analiza una URL dada y extrae su protocolo, host, path, y parámetros de consulta. Imprime cada uno de estos componentes.

Ejercicio 2: Crea una URL a partir de un objeto que contenga el protocolo, host, path y parámetros de consulta. Asegúrate de que la URL generada sea válida.

Ejercicio 3: Dada una URL con parámetros de consulta, extrae los valores de esos parámetros y conviértelos en un objeto JavaScript. Por ejemplo, para la URL http://example.com?name=John&age=30, el objeto resultante debería ser { name: 'John', age: '30' }.

Ejercicio 4: Modifica una URL dada para cambiar su path y agregar un nuevo parámetro de consulta. Por ejemplo, cambia el path de http://example.com/oldpath a /newpath y agrega el parámetro foo=bar.

Ejercicio 5: Dada una URL con un fragmento (hash), elimina el fragmento y devuelve la URL sin él. Por ejemplo, para http://example.com/page#section, la URL resultante debería ser http://example.com/page.

Ejercicio 6: Convierte una URL relativa a una URL absoluta utilizando una URL base proporcionada. Por ejemplo, convierte /path/to/resource en http://example.com/path/to/resource utilizando http://example.com como base.

Ejercicio 7: Extrae y muestra solo el nombre del dominio de una URL completa. Por ejemplo, para http://www.example.com/path, deberías obtener www.example.com.

Ejercicio 8: Dada una URL completa y un objeto de parámetros, construye una nueva URL que incluya esos parámetros adicionales. Por ejemplo, si tienes http://example.com/path y el objeto { foo: 'bar' }, la nueva URL debería ser http://example.com/path?foo=bar.

Ejercicio 9: Implementa una función que tome una URL completa y devuelva un objeto con los componentes protocol, host, pathname, y search de la URL.

Ejercicio 10: Extrae y decodifica los parámetros de consulta de una URL que contiene valores codificados en URL. Por ejemplo, para http://example.com/?name=John%20Doe&age=30, el objeto resultante debería ser { name: 'John Doe', age: '30' }.



Ejercicio: Servidor de Redirección de URLs Cortas
Descripción:
Vas a crear un servidor en Node.js que funcione como un acortador de URLs, similar a servicios como Bit.ly. 
El servidor debe:
Guardar una URL original y devolver una URL corta:

Al enviar una solicitud POST a /shorten, el servidor recibirá una URL original y generará una clave corta única (por ejemplo, una cadena de 6 caracteres alfanuméricos).
El servidor debe devolver la URL corta que incluye la clave generada, la cual será utilizada para redireccionar a la URL original.
Redirigir la URL corta a la original:

Al acceder a la URL corta (por ejemplo, /abc123), el servidor debe redirigir al usuario a la URL original asociada con esa clave.
Manejo de errores:

Si se accede a una URL corta que no existe, el servidor debe devolver un error 404 con un mensaje personalizado.
Si no se envía una URL válida al intentar acortar, el servidor debe devolver un error 400 con un mensaje de error apropiado.
Almacenamiento de URLs:

Utiliza un objeto en memoria para almacenar la relación entre las claves cortas y las URLs originales (puedes expandir esto para usar una base de datos en el futuro).


----------------------------------------------- PATH ------------------------------------------------------


Obtener el nombre del archivo: Dado un string con una ruta de archivo, utiliza path.basename() para obtener solo el nombre del archivo (incluyendo su extensión).

Obtener la extensión del archivo: A partir de una ruta, usa path.extname() para determinar la extensión del archivo.

Unir rutas: Utiliza path.join() para combinar varias partes de una ruta en una sola.

Obtener el directorio de un archivo: Dada una ruta, usa path.dirname() para extraer el directorio donde se encuentra el archivo.

Ruta absoluta: Dado un directorio y un archivo, utiliza path.resolve() para generar la ruta absoluta hacia ese archivo.

Normalizar una ruta: Dada una ruta que incluye segmentos como .. o ./, usa path.normalize() para convertirla en una ruta más simple y sin redundancias.

Comparar rutas: Dadas dos rutas, usa path.relative() para encontrar la ruta relativa entre ellas.

Separar ruta en partes: Usa path.parse() para descomponer una ruta en sus partes (directorio, nombre base, extensión, etc.).

Formar una ruta desde partes: Utiliza path.format() para crear una ruta a partir de un objeto que contiene las partes de una ruta (como las obtenidas en el ejercicio anterior).






----------------------------------------- MAS EJERCICIOS ------------------------------------------------ 

Manejo de Fechas y Tiempos con date-fns
Enunciado: Crea una función que reciba una fecha en formato string y devuelva la diferencia en días con la fecha actual utilizando el módulo date-fns.

Creación de Servidores HTTPS con https
Enunciado: Configura un servidor HTTPS básico utilizando el módulo https y sirve una página HTML simple.

Trabajando con Buffers
Enunciado: Escribe una función que convierta un string a un buffer y luego lo vuelva a convertir a un string, demostrando el uso de buffers en NodeJS.

Realizar Peticiones HTTP con axios
Enunciado: Utiliza el módulo axios para hacer una petición GET a una API pública (por ejemplo, la API de Pokémon) y muestra la respuesta en la consola.

Creación de Servidor WebSocket con ws
Enunciado: Implementa un servidor WebSocket básico utilizando el módulo ws que permita a los clientes conectarse y enviar mensajes.

Manejo de Procesos Hijos con child_process
Enunciado: Crea un script que ejecute un comando del sistema operativo (por ejemplo, ls en Unix o dir en Windows) y muestra el resultado en la consola utilizando el módulo child_process.

Compresión y Descompresión con zlib
Enunciado: Implementa funciones para comprimir y descomprimir strings utilizando el módulo zlib.

Creación de un Servidor UDP con dgram
Enunciado: Configura un servidor UDP básico que escuche en un puerto específico y responda con un mensaje predefinido utilizando el módulo dgram.

Manejo de Variables de Entorno con dotenv
Enunciado: Crea una aplicación que cargue variables de entorno desde un archivo .env utilizando el módulo dotenv y muestra estas variables en la consola.

Cifrado y Descifrado de Datos con crypto
Enunciado: Escribe funciones para cifrar y descifrar un string utilizando el módulo crypto.







